{"mappings":"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","sources":["public/script.js"],"sourcesContent":["//Variables for HTML elements using DOM selection\nconst form = document.getElementById(\"taskform\");\nconst button = document.querySelector(\"#taskform > button\");\nvar taskInput = document.getElementById(\"taskInput\");\nvar dueDateInput = document.getElementById(\"dueDateInput\");\nvar completionTimeInput = document.getElementById(\"completionTimeInput\");\nvar estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\nvar priorityInput = document.getElementById(\"priorityInput\");\n\nvar tasklist = document.getElementById(\"tasklistTable\");\nvar boardColumn = document.getElementById(\"boardColumn\");\n\n///NAVIGATION\n  //------Modular code:THIS SECTION IN NAVIGATION.JS file in components folder\nclass Navigation{\n  constructor(links, pages){\n    this.links = links;\n    this.pages = pages;\n    this.currentPage = null;\n  }\n\n  getLinks(){\n    console.log(this.links);\n  }\n\n  setPage(pageId){\n    this.currentPage = pageId;\n    console.log(this.currentPage);\n    //change the page within the html\n    this.links.forEach((link)=> {\n      link.classList.remove('active');\n      if (this.getHash(link) === pageId){\n        link.classList.add('active');\n      }\n    })\n    this.pages.forEach((page)=> {\n      page.style.display ='none';\n    })\n    document.getElementById(pageId).style.display = \"block\";\n  }\n\n  getHash(link){\n    return link.href.split(\"#\")[1];\n\n  }\n}\n//export default Navigation;\n\n//---------------------------------\n\n//import Navigation from './components/navigation';\nconst links = document.querySelectorAll('nav > ul > li > a');\nconst pages = document.querySelectorAll('.page-container');\n\nvar nav = new Navigation(links, pages);\nnav.getLinks();\n\nnav.links.forEach(function(link){\n  link.addEventListener('click', function(){\n    //console.log(nav.getHash(link));\n    let pageId = nav.getHash(link);\n    nav.setPage(pageId)\n  })\n})\n\n///TASK LIST + KANBAN BOARD\n//event listener for when button clicked\n//OR button.addEventListener(\"click\", function(event) {\nform.addEventListener(\"submit\", function(event){\n  //make sure none of the browser function will happen automatically\n  event.preventDefault();\n  //takes the user input\n  let task = taskInput.value; \n  let dueDate = dueDateInput.value;\n  let completionTime = completionTimeInput.value;\n  let estimatedTime = estimatedTimeInput.value;\n  let priorityRating = priorityInput.options[priorityInput.selectedIndex].value;\n  //add it as a task using addTask function\n  addTask(task, dueDate, completionTime, estimatedTime, priorityRating, false);\n  //console out for debugging\n  console.log(taskListArray);\n})\n\n//empty array to store tasks\nvar taskListArray = []\n\n//The function creates the object & pushes it to an array \nfunction addTask(taskDescription, dueDate, completionTime,estimatedTime, priorityRating, completionStatus) {\n  let d = new Date();\n  let dateCreated = d.getFullYear();\n  let task = {\n    taskDescription,\n    dueDate,\n    dateCreated, \n    completionTime,\n    estimatedTime,\n    priorityRating,\n    completionStatus\n  };\n\n  //add the task to the array\n  taskListArray.push(task);\n  ///return task;\n  renderTask(task);\n  //calling function for kanban board\n  renderKanban(task);\n\n}\n\n\n//ADD the task to the screen via HTML\n  //pulling the task as a complete object rather than individual parts\nfunction renderTask(task){\n  //create html elements\n  let item = document.createElement(\"tr\");\n  item.setAttribute(\"class\", \"newTaskItem\");\n\n  let cell1 =  document.createElement(\"td\");\n  cell1.innerHTML += \"<label for=taskCheckbox>\" + \"<input type=checkbox name=taskCheckbox class=taskCheckboxInput>\" + \"<strong>\" + task.taskDescription + \"</strong>\" + \"</label>\";\n\n  let cell2 =  document.createElement(\"td\");\n  cell2.innerHTML += \"<p>\" + task.dueDate + \"</p>\";\n\n  let cell3 =  document.createElement(\"td\");\n  cell3.innerHTML += \"<p>\" + task.completionTime + \"</p>\";\n\n  let cell4 =  document.createElement(\"td\");\n  cell4.innerHTML += \"<p>\" + task.estimatedTime + ' ' + 'min' + \"</p>\";\n\n  let cell5 =  document.createElement(\"td\");\n  cell5.innerHTML += \"<p>\" + task.priorityRating + \"</p>\";\n\n  let cell6 = document.createElement(\"td\");\n  \n  item.append(cell1, cell2, cell3, cell4, cell5, cell6);\n\n  tasklistTable.appendChild(item);\n\n  //Extra task DOM elements - further user interaction e.g delete\n  let delButton = document.createElement(\"button\");\n  \n    //create a textNode\n  let delButtonText = document.createTextNode(\"Delete\");\n    //get the text appended to button element\n  delButton.appendChild(delButtonText);\n    //append whole button to the item created\n  cell6.appendChild(delButton);\n\n  //Event Listeners for DOM elements\n  delButton.addEventListener(\"click\", function(event){\n   event.preventDefault();\n   item.remove();\n  })\n  //Clear the input form\n  form.reset();\n\n  //Setting the style colours depending on priority rating\n  var newTaskItem = document.getElementsByClassName(\"newTaskItem\");\n  var taskCheckboxInput = document.getElementsByClassName(\"taskCheckboxInput\");\n\n  //Iteration: changed the colours to appropriately correlate with the priority (pink = high, blue = low)\n    if (task.priorityRating  === \"Low\"){\n      newTaskItem[newTaskItem.length-1].style.backgroundColor = \"#E2EDF7\";\n      taskCheckboxInput[taskCheckboxInput.length-1].style.border = \"solid #8CB7F2\";\n    }\n    else if(task.priorityRating  === \"Medium\"){\n      newTaskItem[newTaskItem.length-1].style.backgroundColor = \"#FCF4DD\";\n      taskCheckboxInput[taskCheckboxInput.length-1].style.border = \"solid #F7D382\";\n    }\n    else if(task.priorityRating  === \"High\"){\n      newTaskItem[newTaskItem.length-1].style.backgroundColor = \"#F7D7E7\";\n      taskCheckboxInput[taskCheckboxInput.length-1].style.border = \"solid #EAA0D3\";\n    }\n  //}\n}\n\n\n\n///KANBAN BOARD\n\nfunction renderKanban(task){\n  let card = document.createElement(\"div\");\n  card.setAttribute(\"class\", \"kanban-card\");\n\n  card.innerHTML = \"<div class = kanbanPriority>\" +\"<p>\" + task.priorityRating + \"</p>\" + \"<div>\"\n  card.innerHTML += \"<h4>\" + task.taskDescription + \"</h4>\"\n  card.innerHTML += \"<p>\" + \"<strong>\" + task.dueDate + \"<strong>\" + \"</p>\"\n  card.innerHTML += \"<p>\" + task.completionTime + \"</p>\"\n\n  boardColumn.appendChild(card);\n}\n\n///MUSIC PLAYER\n\nvar musicModal = document.getElementById(\"musicModal\");\nvar musicBtn = document.getElementById(\"musicBtn\");\n\n// When the user clicks on the button, open the modal\nmusicBtn.onclick = function() {\n  musicModal.style.display = \"block\";\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n  if (event.target == musicModal) {\n    musicModal.style.display = \"none\";\n  }\n}\n"],"names":["$aba770e9ce7dbb561d9a46041b248abf$var$form","document","getElementById","querySelector","$aba770e9ce7dbb561d9a46041b248abf$var$taskInput","$aba770e9ce7dbb561d9a46041b248abf$var$dueDateInput","$aba770e9ce7dbb561d9a46041b248abf$var$completionTimeInput","$aba770e9ce7dbb561d9a46041b248abf$var$estimatedTimeInput","$aba770e9ce7dbb561d9a46041b248abf$var$priorityInput","$aba770e9ce7dbb561d9a46041b248abf$var$boardColumn","$aba770e9ce7dbb561d9a46041b248abf$var$links","querySelectorAll","$aba770e9ce7dbb561d9a46041b248abf$var$pages","$aba770e9ce7dbb561d9a46041b248abf$var$nav","links","pages","currentPage","[object Object]","console","log","this","pageId","forEach","link","classList","remove","getHash","add","page","style","display","href","split","getLinks","addEventListener","setPage","event","preventDefault","taskDescription","dueDate","completionTime","estimatedTime","priorityRating","completionStatus","dateCreated","Date","getFullYear","task","$aba770e9ce7dbb561d9a46041b248abf$var$taskListArray","push","item","createElement","setAttribute","cell1","innerHTML","cell2","cell3","cell4","cell5","cell6","append","tasklistTable","appendChild","delButton","delButtonText","createTextNode","reset","newTaskItem","getElementsByClassName","taskCheckboxInput","length","backgroundColor","border","$aba770e9ce7dbb561d9a46041b248abf$var$renderTask","card","$aba770e9ce7dbb561d9a46041b248abf$var$renderKanban","$aba770e9ce7dbb561d9a46041b248abf$var$addTask","value","options","selectedIndex","$aba770e9ce7dbb561d9a46041b248abf$var$musicModal","onclick","window","target"],"version":3,"file":"index.87c487ea.js.map"}