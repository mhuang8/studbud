{"mappings":"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","sources":["public/time.js"],"sourcesContent":["///TIME MANAGEMENT TOOLS - Stopwatch & Flow Time Tracker\n\n//Variables for HTML elements using DOM selection:\n//stopwatch----\nconst startCounterButton = document.getElementById(\"startCounter\");\nconst stopCounterButton = document.getElementById(\"stopCounter\");\nconst resetCounterButton = document.getElementById(\"resetCounter\");\nconst selectStudyTypeInput = document.getElementById(\"studyTypeInput\");\nconst startBreakCounterBtn = document.getElementById(\"startBreakCounter\");\nconst stopBreakCounterBtn = document.getElementById(\"stopBreakCounter\");\nconst breakContainer = document.getElementById(\"breakContainer\")\n\n//flow time----\nvar todayDate = document.getElementById(\"todayDate\");\nvar currentTime = document.getElementById(\"currentTime\");\nvar vocabFlowTime = document.getElementsByClassName(\"vocabFlowTime\");\nvar textbookFlowTime = document.getElementsByClassName(\"textbookFlowTime\");\nvar readingFlowTime = document.getElementsByClassName(\"readingFlowTime\");\nvar flowTimeTable = document.getElementsByClassName(\"flowTimeTable\");\n\n///STOPWATCH ----------------------------------------------------\nlet timePassed = 0;\nlet timerInterval = null;\nlet vocab = 0;\nlet textbook = 0;\nlet reading = 0;\n\nvar stopwatch = document.getElementById(\"counter\");\nvar vocabTimer = document.getElementById(\"vocabTimer\");\nvar textbookTimer = document.getElementById(\"textbookTimer\");\nvar readingTimer = document.getElementById(\"readingTimer\");\n//get data from local storage\nlet timerCounter = JSON.parse(window.localStorage.getItem(\"timerData\"));\n\n// Initialisation of main stopwatch display\nstopwatch.innerHTML = \"<div>\" + formatTime(timePassed) + \"</div>\";\n\n\n/*\nvocabTimer.innerHTML = \"div\" + formatTime(timerCounter[\"Vocab\"]) + \"</div>\"\ntextbookTimer.innerHTML = \"<div>\" + formatTime(timerCounter[\"Textbook\"]) + \"</div>\"\nreadingTimer.innerHTML = \"<div>\" + formatTime(timerCounter[\"Reading\"]) + \"</div>\"\n*/\n/*\nvocabTimer.innerHTML = `\n<div>\n  ${formatTime(timerCounter[\"Vocab\"])}\n</div>\n`;\ntextbookTimer.innerHTML = `\n<div>\n  ${formatTime(timerCounter[\"Textbook\"])}\n</div>\n`;\nreadingTimer.innerHTML = `\n<div>\n  ${formatTime(timerCounter[\"Reading\"])}\n</div>\n`;*/\n\n//input: time integer\n//output: formatted time\nfunction formatTime(time) {\n  let hour = Math.floor(time / 3600);\n  let minutes = Math.floor(time / 60 - hour * 60);\n  let seconds = Math.floor(time % 60);\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  if (hour < 10) {\n    hour = `0${hour}`;\n  }\n  return `${hour}:${minutes}:${seconds}`;\n}\n\n//Start timer iterates every second and increases variable time passed by 1\nfunction startTimer() {\n  timerInterval = setInterval(() => {\n    timePassed += 1;\n    document.getElementById(\"counter\").innerHTML = formatTime(timePassed);\n    if (selectStudyTypeInput.value == \"Vocab\") {\n      vocab += 1;\n    } else if (selectStudyTypeInput.value == \"Textbook\") {\n      textbook += 1;\n    } else if (selectStudyTypeInput.value == \"Reading\") {\n      reading += 1;\n    }\n  }, 1000);\n}\n\nvar startKey;\nvar endKey;\nvar breakKey;\nvar today = new Date();\n\nstartCounterButton.addEventListener(\"click\", function (event) {\n  startCounterButton.disabled = true;\n  breakContainer.style.display = \"none\";\n  startTimer();\n\n  //get start time for flow time tracker\n  //var time = today.getHours() + \":\" + today.getMinutes();\n\n  var time;\n  if (today.getMinutes() < 10) {\n    time = today.getHours() + \":0\" + today.getMinutes();\n  } else if (today.getMinutes() >= 10) {\n    time = today.getHours() + \":\" + today.getMinutes();\n  }\n\n  //store start time to local storage using key/value\n  startKey = \"startTime\" + (startTimeIndex + 1).toString();\n  startTimeIndex = startTimeIndex + 1;\n  window.localStorage.setItem(startKey, JSON.stringify(time));\n});\n\nstartBreakCounterBtn.addEventListener(\"click\", function (event) {\n  startBreakCounterBtn.disabled = true;\n  startTimer();\n});\n\nstopBreakCounterBtn.addEventListener(\"click\", function (event) {\n  clearInterval(timerInterval);\n  startBreakCounterBtn.disabled = false;\n\n  breakKey = \"breakTime\" + (breakTimeIndex + 1).toString();\n  breakTimeIndex = breakTimeIndex + 1;\n  window.localStorage.setItem(breakKey, JSON.stringify(timePassed));\n\n  formatBreakTime();\n});\n\n//stop button re-renders all latest updates from local storage and stop timer and update local storage\nstopCounterButton.addEventListener(\"click\", (e) => {\n  clearInterval(timerInterval);\n  startCounterButton.disabled = false;\n\n  //store Total study time for flow time tracker\n  const timerData = {\n    Vocab: vocab,\n    Textbook: textbook,\n    Reading: reading,\n  };\n  window.localStorage.setItem(\"timerData\", JSON.stringify(timerData));\n  document.getElementById(\"vocabTimer\").innerHTML = formatTime(\n    timerData[\"Vocab\"]\n  );\n  document.getElementById(\"textbookTimer\").innerHTML = formatTime(\n    timerData[\"Textbook\"]\n  );\n  document.getElementById(\"readingTimer\").innerHTML = formatTime(\n    timerData[\"Reading\"]\n  );\n\n  //get end time for flow time tracker\n  var time;\n  if (today.getMinutes() < 10) {\n    time = today.getHours() + \":0\" + today.getMinutes();\n  } else if (today.getMinutes() >= 10) {\n    time = today.getHours() + \":\" + today.getMinutes();\n  }\n\n  //store to local storage using key/value\n  endKey = \"endTime\" + (endTimeIndex + 1).toString();\n  endTimeIndex = endTimeIndex + 1;\n  window.localStorage.setItem(endKey, JSON.stringify(time));\n\n  //record the start and time in flow time tracker\n  formatFlowTime();\n});\n\nresetCounterButton.addEventListener(\"click\", (e) => {\n  timePassed = 0;\n  clearInterval(timerInterval);\n  breakContainer.style.display = \"block\";\n  document.getElementById(\"counter\").innerHTML = formatTime(timePassed);\n  startCounterButton.disabled = false;\n});\n\n///FLOW TIME TRACKER --------------------------------------------------\n\n//Show today's date by calling formatDate function\ntodayDate.innerHTML = formatDate(new Date());\n\nfunction formatDate(date) {\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n\n  return (\n    \"<strong>\" +\n    \"Today:\" +\n    \" \" +\n    day +\n    \" \" +\n    months[monthIndex] +\n    \" \" +\n    year +\n    \"</strong>\"\n  );\n}\n\n//get current time\n\nvar startTimeIndex = 0;\nvar endTimeIndex = 0;\nvar breakTimeIndex = 0;\n\nvar vocabStartTime;\nvar textbookStartTime;\nvar readingStartTime;\n/*\nvar vocabBreakTime;\nvar textbookBreakTime;\nvar readingBreakTime;*/\n\nfunction formatBreakTime() {\n  let breakTimeData = JSON.parse(window.localStorage.getItem(breakKey));\n\n  if (selectStudyTypeInput.value == \"Vocab\") {\n    let vocabBreakTime = document.createElement(\"td\");\n    vocabBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    vocabStartTime.append(vocabBreakTime, interruptionInput);\n  } else if (selectStudyTypeInput.value == \"Textbook\") {\n    let textbookBreakTime = document.createElement(\"td\");\n    textbookBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    textbookStartTime.append(textbookBreakTime, interruptionInput);\n    \n  } else if (selectStudyTypeInput.value == \"Reading\") {\n    let readingBreakTime = document.createElement(\"td\");\n    readingBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    readingStartTime.append(readingBreakTime, interruptionInput);\n  }\n}\n\nfunction formatFlowTime() {\n  //get time from local storage\n  let startTimeData = JSON.parse(window.localStorage.getItem(startKey));\n  let endTimeData = JSON.parse(window.localStorage.getItem(endKey));\n\n  //format for Vocab study type\n  if (selectStudyTypeInput.value == \"Vocab\") {\n    vocabStartTime = document.createElement(\"tr\");\n    vocabStartTime.setAttribute(\"class\", \"vocabFlowTime\");\n    vocabStartTime.innerHTML = \"<td>\" + startTimeData + \"</td>\";\n\n    var vocabEndTime = document.createElement(\"td\");\n    vocabEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    vocabStartTime.appendChild(vocabEndTime);\n\n    vocabFlowTime[vocabFlowTime.length - 1].parentNode.insertBefore(\n      vocabStartTime,\n      vocabFlowTime[vocabFlowTime.length - 1].nextSibling\n    );\n  }\n\n  //format for Textbook study type\n  else if (selectStudyTypeInput.value == \"Textbook\") {\n    textbookStartTime = document.createElement(\"tr\");\n    textbookStartTime.innerHTML = \"<td>\" + startTimeData + \"</td>\";\n    var textbookEndTime = document.createElement(\"td\");\n    textbookEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    textbookStartTime.appendChild(textbookEndTime);\n    textbookFlowTime[textbookFlowTime.length - 1].parentNode.insertBefore(\n      textbookStartTime,\n      textbookFlowTime[textbookFlowTime.length - 1].nextSibling\n    );\n  }\n\n  //format for Reading study type\n  else if (selectStudyTypeInput.value == \"Reading\") {\n    readingStartTime = document.createElement(\"tr\");\n    readingStartTime.innerHTML = \"<p>\" + startTimeData + \"</p>\";\n    var readingEndTime = document.createElement(\"td\");\n    readingEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    readingStartTime.appendChild(readingEndTime);\n    readingFlowTime[readingFlowTime.length - 1].parentNode.insertBefore(\n      readingStartTime,\n      readingFlowTime[readingFlowTime.length - 1].nextSibling\n    );\n  }\n}\n"],"names":["$10e34f3fee7743dcab98be0df1923b6a$var$startCounterButton","document","getElementById","$10e34f3fee7743dcab98be0df1923b6a$var$stopCounterButton","$10e34f3fee7743dcab98be0df1923b6a$var$resetCounterButton","$10e34f3fee7743dcab98be0df1923b6a$var$selectStudyTypeInput","$10e34f3fee7743dcab98be0df1923b6a$var$startBreakCounterBtn","$10e34f3fee7743dcab98be0df1923b6a$var$stopBreakCounterBtn","$10e34f3fee7743dcab98be0df1923b6a$var$breakContainer","$10e34f3fee7743dcab98be0df1923b6a$var$todayDate","$10e34f3fee7743dcab98be0df1923b6a$var$vocabFlowTime","getElementsByClassName","$10e34f3fee7743dcab98be0df1923b6a$var$textbookFlowTime","$10e34f3fee7743dcab98be0df1923b6a$var$readingFlowTime","$10e34f3fee7743dcab98be0df1923b6a$var$timePassed","$10e34f3fee7743dcab98be0df1923b6a$var$timerInterval","$10e34f3fee7743dcab98be0df1923b6a$var$vocab","$10e34f3fee7743dcab98be0df1923b6a$var$textbook","$10e34f3fee7743dcab98be0df1923b6a$var$reading","$10e34f3fee7743dcab98be0df1923b6a$var$stopwatch","JSON","parse","window","localStorage","getItem","$10e34f3fee7743dcab98be0df1923b6a$var$formatTime","time","hour","Math","floor","minutes","seconds","$10e34f3fee7743dcab98be0df1923b6a$var$startTimer","setInterval","innerHTML","value","$10e34f3fee7743dcab98be0df1923b6a$var$startKey","$10e34f3fee7743dcab98be0df1923b6a$var$endKey","$10e34f3fee7743dcab98be0df1923b6a$var$breakKey","date","day","monthIndex","year","$10e34f3fee7743dcab98be0df1923b6a$var$today","Date","addEventListener","event","disabled","style","display","getMinutes","getHours","$10e34f3fee7743dcab98be0df1923b6a$var$startTimeIndex","toString","setItem","stringify","clearInterval","$10e34f3fee7743dcab98be0df1923b6a$var$breakTimeIndex","breakTimeData","vocabBreakTime","createElement","interruptionInput","$10e34f3fee7743dcab98be0df1923b6a$var$vocabStartTime","append","textbookBreakTime","$10e34f3fee7743dcab98be0df1923b6a$var$textbookStartTime","readingBreakTime","$10e34f3fee7743dcab98be0df1923b6a$var$readingStartTime","$10e34f3fee7743dcab98be0df1923b6a$var$formatBreakTime","e","timerData","Vocab","Textbook","Reading","$10e34f3fee7743dcab98be0df1923b6a$var$endTimeIndex","startTimeData","endTimeData","setAttribute","vocabEndTime","appendChild","length","parentNode","insertBefore","nextSibling","textbookEndTime","readingEndTime","$10e34f3fee7743dcab98be0df1923b6a$var$formatFlowTime","getDate","getMonth","getFullYear"],"version":3,"file":"index.HASH_REF_1f3fd8206b24153004c0d0933b81ada3.js.map"}