{"mappings":"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","sources":["public/time.js"],"sourcesContent":["///TIME MANAGEMENT TOOLS - Stopwatch & Flow Time Tracker\n\n//Variables for HTML elements using DOM selection:\n//stopwatch----\nconst startCounterButton = document.getElementById(\"startCounter\");\nconst stopCounterButton = document.getElementById(\"stopCounter\");\nconst resetCounterButton = document.getElementById(\"resetCounter\");\nconst selectStudyTypeInput = document.getElementById(\"studyTypeInput\");\nconst startBreakCounterBtn = document.getElementById(\"startBreakCounter\");\nconst stopBreakCounterBtn = document.getElementById(\"stopBreakCounter\");\nconst breakContainer = document.getElementById(\"breakContainer\");\n\nvar stopwatch = document.getElementById(\"counter\");\nvar vocabTimer = document.getElementById(\"vocabTimer\");\nvar textbookTimer = document.getElementById(\"textbookTimer\");\nvar readingTimer = document.getElementById(\"readingTimer\");\n\n//flow time----\nvar todayDate = document.getElementById(\"todayDate\");\nvar currentTime = document.getElementById(\"currentTime\");\nvar vocabFlowTime = document.getElementsByClassName(\"vocabFlowTime\");\nvar textbookFlowTime = document.getElementsByClassName(\"textbookFlowTime\");\nvar readingFlowTime = document.getElementsByClassName(\"readingFlowTime\");\nvar flowTimeTable = document.getElementsByClassName(\"flowTimeTable\");\n\n///STOPWATCH ----------------------------------------------------\nlet timePassed = 0;\nlet timerInterval = null;\nlet vocab = 0;\nlet textbook = 0;\nlet reading = 0;\n\n//get data from local storage\nlet timerCounter = JSON.parse(window.localStorage.getItem(\"timerData\"));\n\n// Initialisation of main stopwatch display\nstopwatch.innerHTML = \"<div>\" + formatTime(timePassed) + \"</div>\";\n\n/*\nvocabTimer.innerHTML = \"div\" + formatTime(timerCounter[\"Vocab\"]) + \"</div>\"\ntextbookTimer.innerHTML = \"<div>\" + formatTime(timerCounter[\"Textbook\"]) + \"</div>\"\nreadingTimer.innerHTML = \"<div>\" + formatTime(timerCounter[\"Reading\"]) + \"</div>\"\n*/\n\n//function for formatting how the time will appear\n//input: time integer ----> output: formatted time\nfunction formatTime(time) {\n  let hour = Math.floor(time / 3600);\n  let minutes = Math.floor(time / 60 - hour * 60);\n  let seconds = Math.floor(time % 60);\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  if (hour < 10) {\n    hour = `0${hour}`;\n  }\n  return `${hour}:${minutes}:${seconds}`;\n}\n\n//Start timer iterates every second and increases variable time passed by 1\nfunction startTimer() {\n  timerInterval = setInterval(() => {\n    timePassed += 1;\n    document.getElementById(\"counter\").innerHTML = formatTime(timePassed);\n    if (selectStudyTypeInput.value == \"Vocab\") {\n      vocab += 1;\n    } else if (selectStudyTypeInput.value == \"Textbook\") {\n      textbook += 1;\n    } else if (selectStudyTypeInput.value == \"Reading\") {\n      reading += 1;\n    }\n  }, 1000);\n}\n\n//keys for local storage\nvar startKey;\nvar endKey;\nvar breakKey;\nvar today = new Date();\n\n//When START BUTTON is clicked\n//starts the timer counter and stores start time of study (time button is clicked) to local storage\n//break buttons also become hidden until reset button clicked\nstartCounterButton.addEventListener(\"click\", function (event) {\n  startCounterButton.disabled = true;\n  breakContainer.style.display = \"none\";\n  startTimer();\n\n  //get start time for flow time tracker\n  //var time = today.getHours() + \":\" + today.getMinutes();\n  var time;\n  if (today.getMinutes() < 10) {\n    time = today.getHours() + \":0\" + today.getMinutes();\n  } else if (today.getMinutes() >= 10) {\n    time = today.getHours() + \":\" + today.getMinutes();\n  }\n\n  //store start time to local storage using key/value\n  startKey = \"startTime\" + (startTimeIndex + 1).toString();\n  startTimeIndex = startTimeIndex + 1;\n  window.localStorage.setItem(startKey, JSON.stringify(time));\n});\n\n//STOP BUTTON\n//stops the timer & re-renders all latest updates from local storage\nstopCounterButton.addEventListener(\"click\", (e) => {\n  clearInterval(timerInterval);\n  startCounterButton.disabled = false;\n\n  //store Total study time for flow time tracker\n  const timerData = {\n    Vocab: vocab,\n    Textbook: textbook,\n    Reading: reading,\n  };\n\n  //stores to local storage and updates respective parts of flow time tracker w\n  window.localStorage.setItem(\"timerData\", JSON.stringify(timerData));\n  document.getElementById(\"vocabTimer\").innerHTML = formatTime(\n    timerData[\"Vocab\"]\n  );\n  document.getElementById(\"textbookTimer\").innerHTML = formatTime(\n    timerData[\"Textbook\"]\n  );\n  document.getElementById(\"readingTimer\").innerHTML = formatTime(\n    timerData[\"Reading\"]\n  );\n\n  //get end time for flow time tracker and store to local storage using key/value\n  var time;\n  if (today.getMinutes() < 10) {\n    time = today.getHours() + \":0\" + today.getMinutes();\n  } else if (today.getMinutes() >= 10) {\n    time = today.getHours() + \":\" + today.getMinutes();\n  }\n\n  endKey = \"endTime\" + (endTimeIndex + 1).toString();\n  endTimeIndex = endTimeIndex + 1;\n  window.localStorage.setItem(endKey, JSON.stringify(time));\n\n  //calls function to record the start and time in flow time tracker\n  formatFlowTime();\n});\n\n//RESET BUTTON\n//resets counter to 0 and displays the break buttons to encourage users to take a study break\nresetCounterButton.addEventListener(\"click\", (e) => {\n  timePassed = 0;\n  clearInterval(timerInterval);\n  breakContainer.style.display = \"block\";\n  document.getElementById(\"counter\").innerHTML = formatTime(timePassed);\n  startCounterButton.disabled = false;\n});\n\n//Event listeners for BREAK BUTTONS\n//starts the stopwatch counter when start break button clicked\nstartBreakCounterBtn.addEventListener(\"click\", function (event) {\n  startBreakCounterBtn.disabled = true;\n  startTimer();\n});\n\n//stops the counter and stores break time to local storage\nstopBreakCounterBtn.addEventListener(\"click\", function (event) {\n  clearInterval(timerInterval);\n  startBreakCounterBtn.disabled = false;\n\n  breakKey = \"breakTime\" + (breakTimeIndex + 1).toString();\n  breakTimeIndex = breakTimeIndex + 1;\n  window.localStorage.setItem(breakKey, JSON.stringify(timePassed));\n\n  //updates break time in flow time tracker\n  formatBreakTime();\n});\n\n///FLOW TIME TRACKER --------------------------------------------------\n\n//Show today's date by calling formatDate function\ntodayDate.innerHTML = formatDate(new Date());\n\n//formatting the date in a specific way\nfunction formatDate(date) {\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n\n  return (\n    \"<strong>\" +\n    \"Today:\" +\n    \" \" +\n    day +\n    \" \" +\n    months[monthIndex] +\n    \" \" +\n    year +\n    \"</strong>\"\n  );\n}\n//indexes for local storage\nvar startTimeIndex = 0;\nvar endTimeIndex = 0;\nvar breakTimeIndex = 0;\n\nvar vocabStartTime;\nvar textbookStartTime;\nvar readingStartTime;\n/*\nvar vocabBreakTime;\nvar textbookBreakTime;\nvar readingBreakTime;*/\n\n//format the start and end times into the table\nfunction formatFlowTime() {\n  //get time from local storage\n  let startTimeData = JSON.parse(window.localStorage.getItem(startKey));\n  let endTimeData = JSON.parse(window.localStorage.getItem(endKey));\n\n  //format for Vocab study type\n  if (selectStudyTypeInput.value == \"Vocab\") {\n    vocabStartTime = document.createElement(\"tr\");\n    vocabStartTime.setAttribute(\"class\", \"vocabFlowTime\");\n    vocabStartTime.innerHTML = \"<td>\" + startTimeData + \"</td>\";\n\n    var vocabEndTime = document.createElement(\"td\");\n    vocabEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    vocabStartTime.appendChild(vocabEndTime);\n\n    vocabFlowTime[vocabFlowTime.length - 1].parentNode.insertBefore(\n      vocabStartTime,\n      vocabFlowTime[vocabFlowTime.length - 1].nextSibling\n    );\n  }\n\n  //format for Textbook study type\n  else if (selectStudyTypeInput.value == \"Textbook\") {\n    textbookStartTime = document.createElement(\"tr\");\n    textbookStartTime.innerHTML = \"<td>\" + startTimeData + \"</td>\";\n    var textbookEndTime = document.createElement(\"td\");\n    textbookEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    textbookStartTime.appendChild(textbookEndTime);\n    textbookFlowTime[textbookFlowTime.length - 1].parentNode.insertBefore(\n      textbookStartTime,\n      textbookFlowTime[textbookFlowTime.length - 1].nextSibling\n    );\n  }\n\n  //format for Reading study type\n  else if (selectStudyTypeInput.value == \"Reading\") {\n    readingStartTime = document.createElement(\"tr\");\n    readingStartTime.innerHTML = \"<p>\" + startTimeData + \"</p>\";\n    var readingEndTime = document.createElement(\"td\");\n    readingEndTime.innerHTML = \"<td>\" + endTimeData + \"</td>\";\n\n    readingStartTime.appendChild(readingEndTime);\n    readingFlowTime[readingFlowTime.length - 1].parentNode.insertBefore(\n      readingStartTime,\n      readingFlowTime[readingFlowTime.length - 1].nextSibling\n    );\n  }\n}\n\n//formatting the break time to the flow tracker based on study type input in stopwatch\nfunction formatBreakTime() {\n  let breakTimeData = JSON.parse(window.localStorage.getItem(breakKey));\n\n  if (selectStudyTypeInput.value == \"Vocab\") {\n    let vocabBreakTime = document.createElement(\"td\");\n    vocabBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox name=interruptCheckbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    vocabStartTime.append(vocabBreakTime, interruptionInput);\n  } else if (selectStudyTypeInput.value == \"Textbook\") {\n    let textbookBreakTime = document.createElement(\"td\");\n    textbookBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox name=interruptCheckbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    textbookStartTime.append(textbookBreakTime, interruptionInput);\n  } else if (selectStudyTypeInput.value == \"Reading\") {\n    let readingBreakTime = document.createElement(\"td\");\n    readingBreakTime.innerHTML = \"<td>\" + breakTimeData + \"</td>\";\n\n    let interruptionInput = document.createElement(\"td\");\n    interruptionInput.innerHTML =\n      \"<td>\" + \"<input type=checkbox name=interruptCheckbox class=interruptCheckboxInput>\" + \"</td>\";\n\n    readingStartTime.append(readingBreakTime, interruptionInput);\n  }\n}\n"],"names":["$10e34f3fee7743dcab98be0df1923b6a$var$startCounterButton","document","getElementById","$10e34f3fee7743dcab98be0df1923b6a$var$stopCounterButton","$10e34f3fee7743dcab98be0df1923b6a$var$resetCounterButton","$10e34f3fee7743dcab98be0df1923b6a$var$selectStudyTypeInput","$10e34f3fee7743dcab98be0df1923b6a$var$startBreakCounterBtn","$10e34f3fee7743dcab98be0df1923b6a$var$stopBreakCounterBtn","$10e34f3fee7743dcab98be0df1923b6a$var$breakContainer","$10e34f3fee7743dcab98be0df1923b6a$var$stopwatch","$10e34f3fee7743dcab98be0df1923b6a$var$todayDate","$10e34f3fee7743dcab98be0df1923b6a$var$vocabFlowTime","getElementsByClassName","$10e34f3fee7743dcab98be0df1923b6a$var$textbookFlowTime","$10e34f3fee7743dcab98be0df1923b6a$var$readingFlowTime","$10e34f3fee7743dcab98be0df1923b6a$var$timePassed","$10e34f3fee7743dcab98be0df1923b6a$var$timerInterval","$10e34f3fee7743dcab98be0df1923b6a$var$vocab","$10e34f3fee7743dcab98be0df1923b6a$var$textbook","$10e34f3fee7743dcab98be0df1923b6a$var$reading","JSON","parse","window","localStorage","getItem","$10e34f3fee7743dcab98be0df1923b6a$var$formatTime","time","hour","Math","floor","minutes","seconds","$10e34f3fee7743dcab98be0df1923b6a$var$startTimer","setInterval","innerHTML","value","$10e34f3fee7743dcab98be0df1923b6a$var$startKey","$10e34f3fee7743dcab98be0df1923b6a$var$endKey","$10e34f3fee7743dcab98be0df1923b6a$var$breakKey","date","day","monthIndex","year","$10e34f3fee7743dcab98be0df1923b6a$var$today","Date","addEventListener","event","disabled","style","display","getMinutes","getHours","$10e34f3fee7743dcab98be0df1923b6a$var$startTimeIndex","toString","setItem","stringify","e","clearInterval","timerData","Vocab","Textbook","Reading","$10e34f3fee7743dcab98be0df1923b6a$var$endTimeIndex","startTimeData","endTimeData","$10e34f3fee7743dcab98be0df1923b6a$var$vocabStartTime","createElement","setAttribute","vocabEndTime","appendChild","length","parentNode","insertBefore","nextSibling","$10e34f3fee7743dcab98be0df1923b6a$var$textbookStartTime","textbookEndTime","$10e34f3fee7743dcab98be0df1923b6a$var$readingStartTime","readingEndTime","$10e34f3fee7743dcab98be0df1923b6a$var$formatFlowTime","$10e34f3fee7743dcab98be0df1923b6a$var$breakTimeIndex","breakTimeData","vocabBreakTime","interruptionInput","append","textbookBreakTime","readingBreakTime","$10e34f3fee7743dcab98be0df1923b6a$var$formatBreakTime","getDate","getMonth","getFullYear"],"version":3,"file":"index.HASH_REF_1f3fd8206b24153004c0d0933b81ada3.js.map"}